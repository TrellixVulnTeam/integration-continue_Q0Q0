import { Component, Input, NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

function ProgressBarComponent_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r0.whichProgress(ctx_r0.progress), "% ");
} }
function ProgressBarComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r1.whichProgress(ctx_r1.progress), " ");
} }
class ProgressBarComponent {
    constructor() {
        // Default color
        this.color = "#488aff";
        this.disabledP = false;
    }
    /**
     * Returns a color for a certain percent
     * @param {?} percent The current progress
     * @return {?}
     */
    whichColor(percent) {
        // Get all entries index as an array
        /** @type {?} */
        let k = Object.keys(this.degraded);
        // Convert string to number
        k.forEach((e, i) => k[i] = +e);
        // Sort them by value
        k = k.sort((a, b) => a - b);
        // Percent as number
        /** @type {?} */
        let p = +percent
        // Set last by default as the first occurrence
        ;
        // Set last by default as the first occurrence
        /** @type {?} */
        let last = k[0];
        // Foreach keys 
        for (let val of k) {
            // if current val is < than percent
            if (val < p) {
                last = val;
            }
            // if val >= percent then the val that we could show has been reached
            else if (val >= p - 1) {
                return this.degraded[last];
            }
        }
        // if its the last one return the last
        return this.degraded[last];
    }
    /**
     * @param {?} progress
     * @return {?}
     */
    whichProgress(progress) {
        try {
            return Math.round(+progress * 100) / 100;
        }
        catch (_a) {
            return progress;
        }
    }
}
ProgressBarComponent.ɵfac = function ProgressBarComponent_Factory(t) { return new (t || ProgressBarComponent)(); };
ProgressBarComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ProgressBarComponent, selectors: [["progress-bar"]], inputs: { color: "color", disabledP: ["disable-percentage", "disabledP"], progress: "progress", degraded: ["color-degraded", "degraded"] }, decls: 4, vars: 6, consts: [[1, "progress-outer"], [1, "progress-inner"], [4, "ngIf"]], template: function ProgressBarComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵtemplate(2, ProgressBarComponent_ng_container_2_Template, 2, 1, "ng-container", 2);
        ɵngcc0.ɵɵtemplate(3, ProgressBarComponent_ng_container_3_Template, 2, 1, "ng-container", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵstyleProp("width", ctx.whichProgress(ctx.progress) + "%")("background-color", ctx.degraded == null ? ctx.color : ctx.whichColor(ctx.progress));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.disabledP);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.disabledP);
    } }, directives: [ɵngcc1.NgIf], styles: [".progress-outer[_ngcontent-%COMP%] {\n          width: 96%;\n          margin: 10px 2%;\n          padding: 3px;\n          background-color: #f4f4f4;\n          border: 1px solid #dcdcdc;\n          color: #fff;\n          border-radius: 20px;\n          text-align: center;\n        }\n        .progress-inner[_ngcontent-%COMP%] {\n          min-width: 15%;\n          min-height:18px;\n          white-space: nowrap;\n          overflow: hidden;\n          padding: 0px;\n          border-radius: 20px;"] });
/** @nocollapse */
ProgressBarComponent.ctorParameters = () => [];
ProgressBarComponent.propDecorators = {
    progress: [{ type: Input, args: ['progress',] }],
    color: [{ type: Input, args: ['color',] }],
    degraded: [{ type: Input, args: ['color-degraded',] }],
    disabledP: [{ type: Input, args: ['disable-percentage',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ProgressBarComponent, [{
        type: Component,
        args: [{
                selector: 'progress-bar',
                template: `
  <div class=\"progress-outer\">
    <div class=\"progress-inner\" [style.width]=\"whichProgress(progress) + '%'\" [style.background-color]=\"degraded == null ? color : whichColor(progress)\">
      <ng-container *ngIf="!disabledP"> 
        {{whichProgress(progress)}}%
      </ng-container>
      <ng-container *ngIf="disabledP"> 
        {{whichProgress(progress)}}
      </ng-container>
    </div>
  </div>
  `,
                styles: [`
        .progress-outer {
          width: 96%;
          margin: 10px 2%;
          padding: 3px;
          background-color: #f4f4f4;
          border: 1px solid #dcdcdc;
          color: #fff;
          border-radius: 20px;
          text-align: center;
        }
        .progress-inner {
          min-width: 15%;
          min-height:18px;
          white-space: nowrap;
          overflow: hidden;
          padding: 0px;
          border-radius: 20px;
  `]
            }]
    }], function () { return []; }, { color: [{
            type: Input,
            args: ['color']
        }], disabledP: [{
            type: Input,
            args: ['disable-percentage']
        }], progress: [{
            type: Input,
            args: ['progress']
        }], degraded: [{
            type: Input,
            args: ['color-degraded']
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ProgressBarModule {
}
ProgressBarModule.ɵfac = function ProgressBarModule_Factory(t) { return new (t || ProgressBarModule)(); };
ProgressBarModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ProgressBarModule });
ProgressBarModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[
            CommonModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ProgressBarModule, { declarations: function () { return [ProgressBarComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [ProgressBarComponent]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ProgressBarModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule
                ],
                declarations: [ProgressBarComponent],
                exports: [ProgressBarComponent],
                schemas: [CUSTOM_ELEMENTS_SCHEMA]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { ProgressBarComponent, ProgressBarModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1wcm9ncmVzcy1iYXIuanMiLCJzb3VyY2VzIjpbImFuZ3VsYXItcHJvZ3Jlc3MtYmFyL2xpYi9hbmd1bGFyLXByb2dyZXNzLWJhci5jb21wb25lbnQudHMiLCJhbmd1bGFyLXByb2dyZXNzLWJhci9saWIvYW5ndWxhci1wcm9ncmVzcy1iYXIubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxNQXNDYSxvQkFBb0I7QUFDakMsSUFRQTtBQUNBO0FBQ00sUUFBSixJQUFJLENBQUMsS0FBSyxHQUFHLFNBQVMsQ0FBQztBQUN6QixRQUFFLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO0FBQ3pCLEtBQUM7QUFDRDtBQUVFO0FBQ0k7QUFFRztBQUFvQjtBQUNyQixJQURSLFVBQVUsQ0FBQyxPQUFlO0FBQ3pCO0FBQ007QUFBMEIsWUFBM0IsQ0FBQyxHQUFlLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztBQUNoRDtBQUNNLFFBQUosQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakM7QUFDTSxRQUFKLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDOUI7QUFDTTtBQUNNLFlBRE4sQ0FBQyxHQUFHLENBQUMsT0FBTztBQUNsQjtBQUNNO0FBQVc7QUFHTjtBQUEwQixZQUgvQixJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNqQjtBQUNNLFFBQUosS0FBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLEVBQUM7QUFDbkI7QUFDUSxZQUFKLElBQUcsR0FBRyxHQUFHLENBQUMsRUFBQztBQUNmLGdCQUFNLElBQUksR0FBRyxHQUFHLENBQUM7QUFDakIsYUFBSztBQUNMO0FBQ1EsaUJBQUMsSUFBRyxHQUFHLElBQUksQ0FBQyxHQUFFLENBQUMsRUFBQztBQUN4QixnQkFBTSxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDakMsYUFBSztBQUNMLFNBQUc7QUFDSDtBQUNNLFFBQUosT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzdCLEtBQUM7QUFDRDtBQUNPO0FBQ047QUFDWTtBQUFTLElBRnRCLGFBQWEsQ0FBQyxRQUFnQjtBQUM3QixRQUFDLElBQUc7QUFDTCxZQUFJLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVEsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7QUFDN0MsU0FBRztBQUNILFFBQUUsV0FBSztBQUNQLFlBQUksT0FBTyxRQUFRLENBQUM7QUFDcEIsU0FBRztBQUNILEtBQUM7QUFDRDtrREF6RkMsU0FBUyxTQUFDLG1CQUNULFFBQVEsRUFDSixjQUFjO2NBb0JsQixRQUFRLEVBQ1I7bUNBV0M7bUJBL0JROzs7Ozs7O2lKQWtCUjtBQWNGOzs7OzZpQkFDRztBQUFFO0FBQW9CO0FBR047QUFDQyx1QkFEbEIsS0FBSyxTQUFDLFVBQVU7QUFBUSxvQkFDeEIsS0FBSyxTQUFDLE9BQU87QUFBUSx1QkFDckIsS0FBSyxTQUFDLGdCQUFnQjtBQUFRLHdCQUM5QixLQUFLLFNBQUMsb0JBQW9CO0FBQU87Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQUU7QUFBQztBQUFDO0FBQUs7QUFJdEM7QUFNa0I7QUN0RHpCLE1BYWEsaUJBQWlCO0FBQUk7K0NBUmpDLFFBQVEsU0FBQyxtQkFDUixPQUFPLEVBQUU7UUFDUCxZQUFZLG1CQUNiLG1CQUNELFlBQVksRUFBRSxDQUFDO2NBQW9CLENBQUMsbUJBQ3BDLE9BQU8sRUFBRSxDQUFDO0NBQW9CLENBQUMsbUJBQy9CO0dBQU8sRUFBRSxDQUFDO2FBQXNCLENBQUMsZUFDbEM7Ozs7Ozs7Ozs7OzBCQUNJO0FBQUM7QUFBQztBQUFLO0FBQW1DO0FBQXNHO0FBQUk7QUFBQztBQUFLO0FBQW1DO0FBQXNHO0FBQUk7QUFBQzs7QURiQSxBQXNDQSxBQUFBLEFBU0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFNQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBeEZBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBb0JBLEFBQUEsQUFDQSxBQVdBLEFBL0JBLEFBa0JBLEFBY0EsQUFJQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQzVDQSxBQWFBLEFBQUEsQUFSQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOlxyXG4gICAgICAncHJvZ3Jlc3MtYmFyJyxcclxuICBzdHlsZXM6IFtgXHJcbiAgICAgICAgLnByb2dyZXNzLW91dGVyIHtcclxuICAgICAgICAgIHdpZHRoOiA5NiU7XHJcbiAgICAgICAgICBtYXJnaW46IDEwcHggMiU7XHJcbiAgICAgICAgICBwYWRkaW5nOiAzcHg7XHJcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjRmNGY0O1xyXG4gICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgI2RjZGNkYztcclxuICAgICAgICAgIGNvbG9yOiAjZmZmO1xyXG4gICAgICAgICAgYm9yZGVyLXJhZGl1czogMjBweDtcclxuICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLnByb2dyZXNzLWlubmVyIHtcclxuICAgICAgICAgIG1pbi13aWR0aDogMTUlO1xyXG4gICAgICAgICAgbWluLWhlaWdodDoxOHB4O1xyXG4gICAgICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcclxuICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgICAgICAgICBwYWRkaW5nOiAwcHg7XHJcbiAgICAgICAgICBib3JkZXItcmFkaXVzOiAyMHB4O1xyXG4gIGBdLFxyXG4gIHRlbXBsYXRlOlxyXG4gIGBcclxuICA8ZGl2IGNsYXNzPVxcXCJwcm9ncmVzcy1vdXRlclxcXCI+XHJcbiAgICA8ZGl2IGNsYXNzPVxcXCJwcm9ncmVzcy1pbm5lclxcXCIgW3N0eWxlLndpZHRoXT1cXFwid2hpY2hQcm9ncmVzcyhwcm9ncmVzcykgKyAnJSdcXFwiIFtzdHlsZS5iYWNrZ3JvdW5kLWNvbG9yXT1cXFwiZGVncmFkZWQgPT0gbnVsbCA/IGNvbG9yIDogd2hpY2hDb2xvcihwcm9ncmVzcylcXFwiPlxyXG4gICAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiIWRpc2FibGVkUFwiPiBcclxuICAgICAgICB7e3doaWNoUHJvZ3Jlc3MocHJvZ3Jlc3MpfX0lXHJcbiAgICAgIDwvbmctY29udGFpbmVyPlxyXG4gICAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiZGlzYWJsZWRQXCI+IFxyXG4gICAgICAgIHt7d2hpY2hQcm9ncmVzcyhwcm9ncmVzcyl9fVxyXG4gICAgICA8L25nLWNvbnRhaW5lcj5cclxuICAgIDwvZGl2PlxyXG4gIDwvZGl2PlxyXG4gIGBcclxufSlcclxuZXhwb3J0IGNsYXNzIFByb2dyZXNzQmFyQ29tcG9uZW50IHtcclxuXHJcbi8qKiBJbnB1dHMgKiovXHJcbiAgQElucHV0KCdwcm9ncmVzcycpIHByb2dyZXNzOiBzdHJpbmc7XHJcbiAgQElucHV0KCdjb2xvcicpIGNvbG9yOiBzdHJpbmc7XHJcbiAgQElucHV0KCdjb2xvci1kZWdyYWRlZCcpIGRlZ3JhZGVkOiBhbnk7XHJcbiAgQElucHV0KCdkaXNhYmxlLXBlcmNlbnRhZ2UnKSBkaXNhYmxlZFA6IGJvb2xlYW47XHJcblxyXG5cclxuY29uc3RydWN0b3IoKSB7XHJcbiAgLy8gRGVmYXVsdCBjb2xvclxyXG4gIHRoaXMuY29sb3IgPSBcIiM0ODhhZmZcIjtcclxuICB0aGlzLmRpc2FibGVkUCA9IGZhbHNlO1xyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJucyBhIGNvbG9yIGZvciBhIGNlcnRhaW4gcGVyY2VudFxyXG4gKiBAcGFyYW0gcGVyY2VudCBUaGUgY3VycmVudCBwcm9ncmVzc1xyXG4gKi9cclxud2hpY2hDb2xvcihwZXJjZW50OiBzdHJpbmcpe1xyXG4gIC8vIEdldCBhbGwgZW50cmllcyBpbmRleCBhcyBhbiBhcnJheVxyXG4gIGxldCBrOiBBcnJheTxhbnk+ID0gT2JqZWN0LmtleXModGhpcy5kZWdyYWRlZCk7XHJcbiAgLy8gQ29udmVydCBzdHJpbmcgdG8gbnVtYmVyXHJcbiAgay5mb3JFYWNoKChlLCBpKSA9PiBrW2ldID0gK2UpO1xyXG4gIC8vIFNvcnQgdGhlbSBieSB2YWx1ZVxyXG4gIGsgPSBrLnNvcnQoKGEsIGIpID0+IGEgLSBiKTtcclxuICAvLyBQZXJjZW50IGFzIG51bWJlclxyXG4gIGxldCBwID0gK3BlcmNlbnRcclxuICAvLyBTZXQgbGFzdCBieSBkZWZhdWx0IGFzIHRoZSBmaXJzdCBvY2N1cnJlbmNlXHJcbiAgbGV0IGxhc3QgPSBrWzBdO1xyXG4gIC8vIEZvcmVhY2gga2V5cyBcclxuICBmb3IobGV0IHZhbCBvZiBrKXtcclxuICAgIC8vIGlmIGN1cnJlbnQgdmFsIGlzIDwgdGhhbiBwZXJjZW50XHJcbiAgICBpZih2YWwgPCBwKXtcclxuICAgICAgbGFzdCA9IHZhbDtcclxuICAgIH1cclxuICAgIC8vIGlmIHZhbCA+PSBwZXJjZW50IHRoZW4gdGhlIHZhbCB0aGF0IHdlIGNvdWxkIHNob3cgaGFzIGJlZW4gcmVhY2hlZFxyXG4gICAgZWxzZSBpZih2YWwgPj0gcCAtMSl7XHJcbiAgICAgIHJldHVybiB0aGlzLmRlZ3JhZGVkW2xhc3RdO1xyXG4gICAgfVxyXG4gIH1cclxuICAvLyBpZiBpdHMgdGhlIGxhc3Qgb25lIHJldHVybiB0aGUgbGFzdFxyXG4gIHJldHVybiB0aGlzLmRlZ3JhZGVkW2xhc3RdO1xyXG59XHJcblxyXG53aGljaFByb2dyZXNzKHByb2dyZXNzOiBzdHJpbmcpe1xyXG4gIHRyeXtcclxuICAgIHJldHVybiBNYXRoLnJvdW5kKCtwcm9ncmVzcyAqIDEwMCkgLyAxMDA7XHJcbiAgfVxyXG4gIGNhdGNoe1xyXG4gICAgcmV0dXJuIHByb2dyZXNzO1xyXG4gIH1cclxufVxyXG59IiwiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUHJvZ3Jlc3NCYXJDb21wb25lbnQgfSBmcm9tICcuL2FuZ3VsYXItcHJvZ3Jlc3MtYmFyLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IENVU1RPTV9FTEVNRU5UU19TQ0hFTUEgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvbW1vblwiO1xyXG5cclxuQE5nTW9kdWxlKHtcclxuICBpbXBvcnRzOiBbXHJcbiAgICBDb21tb25Nb2R1bGVcclxuICBdLFxyXG4gIGRlY2xhcmF0aW9uczogW1Byb2dyZXNzQmFyQ29tcG9uZW50XSxcclxuICBleHBvcnRzOiBbUHJvZ3Jlc3NCYXJDb21wb25lbnRdLFxyXG4gIHNjaGVtYXM6IFtDVVNUT01fRUxFTUVOVFNfU0NIRU1BXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgUHJvZ3Jlc3NCYXJNb2R1bGUgeyB9Il19